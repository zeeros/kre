#+TITLE: Unit 2 - Knowledge Representation: Rules and Production Systems

* Exercise 20

Propose a rule for the knowledge represented in the following sentences

** Grandmothers tell nice stories
$Tells\_NiceStories(x) \Leftarrow Grandmother(x)$
** I hate all people that owns cats
$I\_hate(x,y) \Leftarrow owns(x,y) \wedge Person(x) \wedge Cat(y)$
** Summer days are hotter than winter days
$Hotter(x,y) \Leftarrow SummerDay(x) \wedge WinterDay(y)$
** People that have both life and health insurances are full covered
$FullyCovered(x) \Leftarrow person(x) \wedge Has\_LifeInsurance(x) \wedge Has\_HealthInsurance$
** All the subjects in the master have at least two different exams
$Has\_Exam(x) \wedge Has\_Exam(y) \wedge x \neq y \Leftarrow MasterSubject(s)$, assuming that the consequent $P$ of a rule $Q \Leftarrow P$ can have several effects.
** The friends of the friends are friends
$Friend(x,z) \Leftarrow Friend(x,y) \wedge Friend(y,z)$, assuming $Friend$ is commutative
** The friends of the enemies are enemies
$Enemy(x,z) \Leftarrow Enemy(y,x) \wedge Friend(y,z)$
** There are six eye colors: amber, blue, brown, grey, green, and hazel
$EyeColor(amber) \vee Eyecolor(blue) \vee Eyecolor(brown) \vee Eyecolor(grey) \vee Eyecolor(green) \vee Eyecolor(hazel)$
** People with green eye color are more attractive than the rest
$MoreAttractive(x,y) \Leftarrow Person(x) \wedge Person(y) \wedge EyeColor(x,green) \wedge \neg EyeColor(y,green)$
** Drivers take more than three months to get their driving license
$Months\_Required(x,y) > 3 \Leftarrow Person(x) \wedge DrivingLicense(y) \wedge Driver(x,y)$
** When red color is combined with yellow color, we obtain orange color
$Color(z, orange) \Leftarrow Color(x, red) \wedge Color(y, yellow) \wedge MixColor(z, x, y)$
** Students have to pass, at least, three subjects in order to continue studying
$PassedSubjects(x) > 3 \Leftarrow Student(x) \wedge Can\_Continue\_Study(x)$
** Exercise m

There are five groups of live beings: animals, plants, fungi, seaweeds, and bacteria.
$Animal(x) \vee Plant(x) \vee Fungi(x) \vee Seaweed(x) \vee Bacteria(x) \Leftarrow LiveBeing(x)$
Animals can move and eat other live beings.
$Can\_move(x) \Leftarrow Animal(x)$
$Can\_eat(x,y) \Leftarrow Animal(x) \wedge LiveBeing(y)$
People are Animals.
$Animal(x) \Leftarrow Person(x)$
Plants cannot move and they build their own food.
$\neg Can\_move(x) \Leftarrow Plant(x)$
$BuildsItsFood(x) \Leftarrow Plant(x)$
Trees, bushes, and herbs are plants.
$Plant(x) \Leftarrow Tree(x) \vee Bush(x) \vee Herb(x)$
Fungi cannot move but they cannot make their own food.
$\neg Can\_move(x) \Leftarrow Fungi(x)$
$\neg BuildsItsFood(x) \Leftarrow Fungi(x)$
Mushrooms and molds are fungi.
$Fungi(x) \Leftarrow Mushroom(x) \vee Mold(x)$
Seaweeds are simpler than plants.
$Simpler(x,y) \Leftarrow Seaweed(x) \wedge Plant(y)$
Bacteria are tiny, they only can be observed with a microscopy and they’re also called micro-organisms.
$Tiny(x) \Leftarrow Bacteria(x)$
$Microscopic(x) \Leftarrow Bacteria(x)$
$MicroOrganism(x) \Leftarrow Bacteria(x)$

** If something looks like a dog, moves like a dog, and barks like a dog, it is a dog.
$Dog(x) \Leftarrow LooksLikeDog(x) \wedge MovesLikeDog(x) \wedge BarksLikeDog(x)$
** I hate John, if he registers to a subject I don’t.
$Hate(I,John) \wedge(\neg Registers(I,x) \Leftarrow Subject(x) \vee Registers(John,x))$
** Exercise p

Some people in love get married.
$Married(x,y) \Leftarrow Person(x) \wedge Person(y) \wedge conditionOfSome(x,y)$
All just married people are in love.
$InLove(x,y) \Leftarrow JustMarried(x,y) \wedge Person(x) \wedge Person(y)$
Some people stop loving their couple some time after marriage.
$\neg InLove(x,y, T_2) \Leftarrow Married(x,y,T_1) \wedge Person(x) \wedge Person(y) \wedge T_2=sometimeAfter(T_1)$
All married people that are not in love, get divorced (express divorce as the absence of marriage)
$divorced(x,y) \Leftarrow \neg InLove(x,y) \wedge Married(x,y) \wedge Person(x) \wedge Person(y)$

* Exercise 21

Given the following knowledge-base on parent relationships representing that John and Mary are parents of Peter, etc.

[[./ex21.jpg]]

Calculate the number of questions in order to know whether $Ancestor(John,Adele)$ is true or not for each one of the following three sets of rules:

** A

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Parent(x,z) \wedge Ancestor(z,y)\cdot$

- $Ancestor(John,Adele)$?
   - $Parent(John,Adele)?$ No
   - $Parent(John,z) \wedge Ancestor(z,Adele)$? Only option $z=Peter$
      - $Parent(Jonh, Peter)?$ Yes
      - $Parent(John,Peter) \wedge Ancestor(Peter,Adele)$?
	 - $Parent(Peter,Adele)$? No
	 - $Parent(Peter,z) \wedge Ancestor(z,Adele)$? Only option $z=Mike$
	    - $Parent(Peter,Mike)$? Yes
	    - $Parent(Peter,Mike) \wedge Ancestor(Mike,Adele)$?
	       - $Parent(Mike,Adele)$? _Yes_

10 queries to the KB are required

** B

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Parent(z,y) \wedge Ancestor(x,z)\cdot$

** C

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Ancestor(x,z) \wedge Ancestor(z,y)\cdot$

* Exercise 22

[[./ex22.jpg]]

Calculate the same as in exercise 21 for the following parental KB:

** A

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Parent(x,z) \wedge Ancestor(z,y)\cdot$

** B

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Parent(z,y) \wedge Ancestor(x,z)\cdot$

** C

$Ancestor(x,y) \Leftarrow Parent(x,y)\cdot$
$Ancestor(x,y) \Leftarrow Ancestor(x,z) \wedge Ancestor(z,y)\cdot$

* Exercise 23

Given the following set of rules

$Lectures(adele,knowledgeRepresentation)\cdot$
$Lectures(barry,knowledgeRepresentation)\cdot$
$Lectures(charles,knowledgeEngineering)\cdot$
$Enrolled(donnald,knowledgeRepresentation)\cdot$
$Knows(x,y) \Leftarrow Enrolled(x,s_1) \wedge Enrolled(y,s_2) \wedge (s_1=s_2) \cdot$
$Knows(x,y) \Leftarrow Enrolled(x,z) \wedge Lectures(y,z) \cdot$

** Perform forward-chaining when $Enrolled(eve,knowledgeRepresentation)$ is asserted
** Perform forward-chaining when $Enrolled(frank,knowledgeEngineering)$ is asserted
** Perform backward-chaining when $Knows(donnald,adele)$ is asked
** Perform forward-chaining when $Knows(donnald,barry)$ is asserted
** Perform backward-chaining when $Enrolled(frank,knowledgeEngineering)$ is asked
** Perform backward-chaining when asserted $\neg Knows(donnald,charles)$

* Exercise 24

Given the following working memory apply each one of the respective production rules

Working Memory

#+BEGIN_SRC
(book name:Don-Quixote author:Miguel-Cervantes year:1605 type:chivalry)
(book name:Hamlet author:William-Shakesperare)
(book name:The-three-Musketeers author:Alexandre-Dumas year:1844)
(book name:The-Adventures-of-Huckleberry-Finn year:1884 author:Mark-Twain)
(writer name:Miguel-Cervantes bithyear:1547 deathyear:1616)
(writer name:William-Shakespeare birthdate:1564 deathyear:1616)
(cites book:The-three-Musketeers to:Don-Quixote)
(cites book:The-Adventures-of-Huckleberry-Finn to:Don-Quixote)
#+END_SRC

** ~IF (writer name:x birthyear:y) (writer name:z birthyear:{> y}) THEN ADD (older who:x to:z) b)~
** ~IF (writer name:x deathyear:y) (book author:z year:{> y}) THEN ADD (older who:x to:z) c)~
** ~IF -(writer name:x) (book author:x) THEN REMOVE 2 d)~
** ~IF (cites book:x to:y) –(book name:x) THEN REMOVE 1 e)~
** ~IF (cites book:x to:y) (book name:x) (book name:y type:z) THEN MODIFY 2 (type z)~

* Exercise 25

Give the working memory elements in exercise 24 provide production rules to implement each one of the following knowledge (extend the working memory with new elements if required)

** books written between 1600 and 1800 are of style baroque
** books whose author name is not known are anonymous
** writers with more than 10 books written are prolific
** writers with birthyear after deathyear must be deleted
** books that are cited by more than 5 other books are master-pieces
** authors who wrote a master-piece are classics

* Exercise 26

For the following production system, trace the results, assuming that the conflict resolution strategy is: an instance of most important applicable rule is selected. If there are more than one such instances, the instance is selected randomly. The order of rule importance is: R3 more important than R1, R1 is more important than R2.

#+BEGIN_SRC
F1 animal(tiger)
F2 animal(cat)
F3 large(tiger)
F4 eatsMeat(tiger)
F5 eatsMeat(cat)
#+END_SRC

#+BEGIN_SRC
R1 dangerous(x) <= animal(x) ^ large(x) ^ eatsMeat(x)$
R2 breathesOxygen(x) <= animal(x)
R3 runAwayNow <= dangerous(x)
#+END_SRC

* Exercise 27

In the world of blocks we have the WME formats (block name:id color:c shape:s) asserting that there’s a block with unique name id, (on up:blockid down:blockid) representing that up block is immediately on top of block down.

** Represent the knowledge “There are not consecutive blocks of the same color”.
** Make  a  constructor  saying  that  a  block  composition  can  be  combined  to  make  a  new  block.
** If all the blocks within a composite block have the same color and shape, the composite block is said to be homogeneous, otherwise it is heterogeneous.
** A  structure  of  blocks  is  said  to  be  legal  if  the  number  of  stacked  blocks  are  below  one  hundred.
** Height is the property of a block structure that stores the number of staked blocks of that structure.
** Constructing a structure consists on identifying two free blocks, use a crane to pick the free  block  with  a  lower  height  and  staking  it  on  top  of  the  other  block.  Implement  the  production rules to implement this procedure.

* Exercise 28

In the world of blocks there's a group of blocks on a table, and we want to make a heap with all these blocks and with bigger blocks below smaller blocks. We count with a robot arm. Provide production systems for the following implementations. Implement all the solutions in CLIPS.

** We are only allowed to have the type of WME (block id:int size:int position:{table, robot-hand, heap}
** We are only allowed to have the type of WME (block id:int size:int position: {table, robot-hand, #position in the heap}.
** We are allowed to have the following WME types: (block id:int size:int, (robot-hand block: int, (on block1: int, block2: int. Note: you should convert the blocks that the robot takes into used-blocks to avoid the robot to take them more than once.

* Exercise 29

Domino is the game made of rectangular tiles with a line dividing its face into two square ends, each one containing numbers in the range 0-6. There are not repeated tiles. A simplified version of the game for two players consists on an initial selection of seven free tiles for each player. Starting with payer one, he releases one of his tiles (first movement) starting a line of game. Then alternatively, each player can release one of his tiles with one end that fits one of the extremes of the line of game. If a player cannot release one of his tiles, he takes a free tile. The turn passes. A player is said to lose the game when it is his turn to release a tile, he has tiles but he can release none of them, and there are not free tiles available to take.

** Provide a working memory element format to represent free tiles
** Provide a working memory element format to indicate the tiles of one player
** Provide a working memory element format to represent the line of game
** Assuming a random conflict strategy, construct a production rule for a player to select one tile at random among the ones that are free
** Construct a production rule for a player to select seven free tiles (beginning of game)
** Construct a production rule to represent the first movement of the first player
** Construct a production rule to represent the next tile release of any player in the line of game
** Construct a production rule to represent that a player has lost (he can release none of his tiles and there are no free tiles to take)

* Exercise 30

The Towers of Hanoi problem (see exercise 15) has an elegant recursive solution, but it also has a less well known iterative solution as follows. First, we arrange the pegs in a circle, so that clockwise we have rods A, B, C, and then A again. Disks are given the respective names 1, 2, and 3. Following this, assuming we never move the same disk twice, there will always only be one disk that can be legally moved, and we transfer it to the first rod it can occupy, moving it in a clockwise direction, if it is even, and counter-clockwise, if it is odd. Write a collection of production rules that implement this procedure. Initially, the working memory will have elements (on rod: A disk:i) for each disk and an element (solve). When your rules stop firing, you should have (on rod:C disk:i) for each disk and (done) in the working memory.

* Exercise 31

A circular railway is composed of four train stations S1, S2, S3, and S4. A train T circulates from S1 to S2, from S2 to S3, from S3 to S4, and from S4 to S1, starting the cycle again. The train has a capacity for 30 passengers sited and 20 passengers standing. Passengers arrive to and leave from stations. Some passengers want to be seated, some others don’t care. Passengers have a destination station where they want to arrive to. All the passengers arrive to a station, get into the next train with a vacancy of the sort wished (seated or don’t care) and waits till the train arrives to the passenger’s destination station.

** Propose the structure of the working memory elements to implement this system
** Propose a rule (or set of rules) describing the patients arriving and leaving a station
** Propose a rule (or set of rules) describing the train moving between stations (consider that a train does not leave a station till all the passengers with destination this station have stepped off)
** Propose a rule (or set of rules) describing the passengers of a station to step in the trainwhen the train arrives to the station, and the passengers to step off the train when they arrive to their destination station.

* Exercise 32

In some academies, students are able to enroll in subjects that they want to attend and whose pre-requirement they have all been passed. Pre-requirement of a subject are a set of other subjects that need to be passed before registering to the first one. Represent this behavior with a production system.

Other academies also consider co-requirements, these meaning that one subject can be enrolled if all its co-requirement subjects are also enrolled. Represent these restrictions with a production system.
