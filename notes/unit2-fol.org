#+TITLE: First Order Logic

* FOL

Symbols
- Logical :: special elements that describe the language
  - Punctuation :: $\{ , \}, \cdot$
  - Connectives :: $\wedge$, $\vee$, $\neg$
  - Variables :: $x$, $y$ ,$z$
- Non-logical :: have application-dependent meaning
  - Function symbols :: $f$, $g$, $h$, $\cdots$ e.g. $bestFriend(x)$ as a function calculation
  - Predicate symbols :: $P, Q, R, \cdots$ e.g. $BestFriend(John,Mike)$ as a statement
Definition
- Arity :: Number of arguments of non-logical symbols (eg. $High()$ is a constant, arity $0$)
Syntactic expressions
- Terms :: Every variable is a term, also $f(t_1,\cdots ,t_n)$ is a term if $t_1,\cdots ,t_n$ are terms
- Formulas :: Can be
  - $P(t_1, \cdots , t_n)$, if $t_1,\cdots ,t_n$ are terms and $f$ a function then
  - $t_1 = t_2$ is a formula if $t_1, t_2$ are terms
  - If $a,b$ are formulas and $x$ is a variable then $\neg a, a \wedge b, a \vee b, \forall x.a, \exists x.b$ are formulas
- Preferences :: $\wedge$ is evaluated before $\vee$, $\neg$ before both of them
- Implication :: $a \supset b$ (or $a \Rightarrow b$, $\neg a \vee b$)
- Equivalence :: $a \equiv b$ means $(a \supset b) \wedge
- Bounded variables :: $\forall x.f(x,John)$, $x, John$ are bounded.
- Free variables :: $\forall x.f(x,y)$, $x$ is bounded and $y$ is free. An expression with free variables is either wrong or not complete.
Operational equivalences
- $x \equiv x$
- $x \equiv \neg (( \neg x ))$
- $(x \wedge y) \equiv \neg ((\neq x) \vee (\neg y))$
- $(x \vee y) \equiv \neg ((\neg x) \wedge (\neg y))$
- $(x \supset y) \equiv (\neg x) \vee y$
- $\forall x : P(x) \equiv \neg (\exists x: \neg P(x))$
- $\exists x : P(x) \equiv \neg (\forall x : \neg P(x))$

* Knowledge Representation with FOL

- Explicit knowledge are facts (eg. $Dog(Tobby)$) or sentences (eg. $\forall x.Dog(x) \supset Mammal(x)$)
- No implicit knowledge (eg. $Mamma(Tobby)$)
- Know-what knowledge can be defined with
  - Properties :: $object \overset{property}{\rightarrow} value$
    - Values as predicates :: $value(object)$
    - Properties as predicates :: $property(object, value)$
    - Complex predicates :: $p(object, property, value)$
  - Relationships :: $object \overset{relationship}{\rightarrow} object$
    - Relationship as predicates :: $relationship(object,object)$
    - Complex predicates :: $relation(object,object,relationship)$
  - n-ary Relationships :: $(object_1, \cdots, \textbf{object}_i, \cdots, object_n)$
    - $Object_i(object_1, \cdots, object_n)$
    - $Property(object_1, object_2, \cdots, object_n)$
    - $Has/Are(object_1, object_2, \cdots, object_n, property)$
- Know-how can be defined with
  - Procedural control models :: Sequence, parallel fork, synchronization, alternatives, etc
  - Non-monotonic logic :: Rules may reduce the Knowledge Base
