#+TITLE: Unit 1 - Introduction and Concepts

* Introduction

We introduce two different areas dealing with "knowledge"

- Knowledge Representation :: Artificial Intelligence area concerned with how to represent and manipulate knowledge in an automated way.

- Knowledge Engineering :: Computer Engineering area concerned with procedures and methods helping developers to systematically and formally construct knowledge bases.

A generic knowledge-based system deals with an input $I$ and an output $O=f(I,K)$
- e.g. $I=\text{Symptoms}, K=\text{Medical knowledge}, O=\text{Drug}$
- The knowledge is provided by a *knowledgebase*
- The system behaves in an *intelligent* way

But why should we use a knowledgebase instead of a database? Consider a database having the following tables:
- ~PERSONS~ table
| Id  | Name   |
|-----+--------|
| A   | Albert |
| B   | Beth   |
| C   | Cindy  |
| ... | ...    |
- ~PARENTSHIPS~ table
| X   | Y   |
|-----+-----|
| A   | B   |
| B   | C   |
| B   | D   |
| ... | ... |

We can ask the following questions
- Is ~A~ a parent of ~B~?
  - ~SELECT X FROM PARENTSHIPS WHERE X="A",Y="B";~
- Who are the parents of ~B~?
  - ~SELECT X FROM PARENTSHIPS WHERE Y="B";~
- Who are the sons of ~A~?
  - ~SELECT X FROM PARENTSHIPS WHERE Y="B";~
- Who are the ancestors?
  - With a table of ~ANCESTORS~
    - With $n$ people, ~ANCESTORS~ is in $O(n^2)$
    - If $1$ generation has (on average) $2.36$ ancestors, then $20$ generations have $28.7$ million ancestors
  - With some explicit "knowledge" (e.g. intelligence)
    - ~ANCESTOR~
      - If ~X~ is a parent of ~Y~ then ~X~ is an ancestor of ~Y~
      - If ~X~ is an ancestor of ~Z~ and ~Z~ is a parent of ~Y~ then ~X~ is an ancestor of ~Y~
    - We can rely on this knowledge base to answer the question
     #+begin_src
      if PARENT(X,Y) then return true;
      else
       search Z: PARENT(Z,Y)
       if Z does not exist then return false;
       else
	return Ancestor(X,Z.father) or Ancestor(X,Z.mother);
     #+end_src

*Decision Support Systems* are computer systems helping users to make decisions in complex domains.

* Data, Information, and Knowledge

- Data :: Raw and without context, it simply exists in its form (either usable or not)
- Information :: Data + Meaning, it can change the perception of the receiver about something
- Meaning :: For Davenport and Prusak, the five C's describe what gives meaning
  - Contextualization :: Purpose of data
  - Categorization :: Classified or generalization to concepts
  - Calculation :: Mathematical or statistical analysis
  - Correction :: Removal of erros
  - Condensation :: Removal of unnecessary elements
- Knowledge :: Information + "something", generalized to increase applicability. What is "something"?
  - For Davenport and Prusak, the four C's describe it as
    - Comparison :: Similarity to other contexts
    - Consequence :: Implication in decision taking
    - Connection :: Relationship with other information
    - Conversation :: Feedback of people
  - For Tobin, "something" is an application

- Wisdom :: Knowledge + Intuition + Experience
- Expertise :: Wisdom + Selection + Principles + Constrains + Learning
- Capability :: Expertise + Integration + Distribution + Navigation

* Types and Uses of Knowledge

- Evidence :: How easily can it be transferred?
  - Explicit :: If it can be expressed in systematic and formal way with data
  - Implicit or Tacit :: If it is highly experiental, ephemeral and transitory
- Purpose :: What is it describing?
  - Declarative or Know-what :: Factual assertions describing what should be done
  - Procedural or Know-how :: Processes and strategies describing how tasks should be done
- Ownership :: Who owns it?
  - Individual :: Personal skills, experise, experience
  - Group :: Individual knowledge + How do they interact
  - Organizational :: Groups as an whole
- Format :: How is it represented?
  - Informal :: Textually (with natural language) and/or visually expressed (eg. txt)
  - Semi-structured :: Informal representation enriched with some attributes (eg. xml)
  - Structured :: Has an attribute-based structure (ex. db2)
  - Formal :: Has a knowledge structure, such as frames, production rules, ontologies, etc.

In a enterprise, we can find the following types of knowledge

| Enterprise case           | Explicit | Implicit | Know-what | Know-how |
|---------------------------+----------+----------+-----------+----------|
| Business strategies       | Y        | N        | N         | Y        |
| Prodcuts and services     | Y        | N        | Y         | N        |
| Business processes        | N        | Y        | N         | Y        |
| Organisational structures | Y        | N        | Y         | N        |
| Policies and procedures   | Y        | Y        | Y         | Y        |
| Culture and values        | Y        | Y        | Y         | N        |
| Information systems       | Y        | Y        | Y         | N        |

* Knowledge Representation

Data is represented by single or multiple values (structured), information with tables, databases, data warehouses. But how can we represent knowledge? We have problems regarding

- Knowledge itself :: syntax, semantics, reasoning & inference
- Inference :: Reasoning and infering using knowledge
  - Forward chaining :: Draw conclusions from facts
  - Backward chaining :: Assert facts from conclusions
- Knowledge-base :: Given a knowledge base $KB$ and an assertion $f$
  - Completeness :: $KB \models f \rightarrow KB \vdash f$, so if $f$ is true under $KB$ then we can derive $f$
  - Soundness :: $KB \vdash f \rightarrow KB \models f$, so if we can derive $f$ under $KB$ then $f$ is true

Formal methods for knowledge representation are
- First Order Logic
- Rules and Production Systems
- Object Oriented Representation
- Network Representation
- Ontologies

* Knowledge Engineering

Software Engineering is not enough when dealing with knowledge, Knowledge Engineering issues are Knowledge
- Life Cycle :: Processes, uses, loops
- Auditing :: Delimiting knowledge
- Deployment :: Installing knowledge
- Acquisition (or Elicitation) :: Cooperating with experts

* Syntax ans Semantics

One knowledge representation may be useful in some contexts and useless in others. The following representations are syntactically correct
- ~for all x, flies(x)~ :: but may not be true for some animals (eg. dog)
- ~for all x, flies(x) is a subset of ~feathered(x)~ :: but may no be true for some animals (eg. bat)
